generator client {
  provider = "prisma-client-py"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int         @id @default(autoincrement())
  password         String
  email            String
  created_at       DateTime    @default(now())
  user_name        String      @unique
  role_id          Int?
  is_active        Boolean     @default(true)
  clients          Client[]    @relation("ClientCreatedBy")
  projects         Project[]   @relation("ProjectCreatedBy")
  created_projects Project[]   @relation("ProjectUser")
  roles            Role[]      @relation("RoleCreatedBy")
  timesheets       Timesheet[] @relation("TimesheetCreatedBy")
  Timesheet        Timesheet[]
  role             Role?       @relation(fields: [role_id], references: [id])
}

model Project {
  id           Int           @id @default(autoincrement())
  description  String?
  start_date   DateTime?
  end_date     DateTime?
  created_at   DateTime      @default(now())
  user_id      Int?
  project_name String?
  client_id    Int?
  status       ProjectStatus @default(PLANNED)
  created_by   Int?
  teamMembers  Json?         @default("[]")
  client       Client?       @relation(fields: [client_id], references: [id])
  creator      User?         @relation("ProjectCreatedBy", fields: [created_by], references: [id])
  user         User?         @relation("ProjectUser", fields: [user_id], references: [id])
  timesheets   Timesheet[]
}

model Timesheet {
  id          Int             @id @default(autoincrement())
  start_date  DateTime?
  end_date    DateTime?
  duration    Float?
  projectId   Int?
  description String?
  userId      Int?
  status      TimesheetStatus @default(PENDING)
  created_by  Int?
  creator     User?           @relation("TimesheetCreatedBy", fields: [created_by], references: [id])
  project     Project?        @relation(fields: [projectId], references: [id])
  user        User?           @relation(fields: [userId], references: [id])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  created_at  DateTime     @default(now())
  is_enabled  Boolean      @default(true)
  created_by  Int?
  creator     User?        @relation("RoleCreatedBy", fields: [created_by], references: [id])
  user        User[]
  permissions Permission[] @relation("RolePermissions")
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String   @unique
  description String?
  created_at  DateTime @default(now())
  roles       Role[]   @relation("RolePermissions")
}

model Client {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  address    String
  contact    String
  email      String
  notes      String
  is_enabled Boolean   @default(true)
  created_by Int?
  creator    User?     @relation("ClientCreatedBy", fields: [created_by], references: [id])
  project    Project[]
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum TimesheetStatus {
  PENDING
  APPROVED
  REJECTED
}
